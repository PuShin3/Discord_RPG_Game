from __future__ import annotations
import interactions
from typing import Tuple, List, Dict
from functools import cmp_to_key

from src.DataBase import DataBase
from src.Storage import Storage


def sortByEquipAndName(x: Dict, y: Dict) -> bool:
    if x["Ë£ùÂÇô"]:
        return True
    if y["Ë£ùÂÇô"]:
        return False
    return x["ÂêçÁ®±"] < y["ÂêçÁ®±"]


class UI:
    @staticmethod
    def createSkillMenuEmbed(ctx: interactions.CommandContext, db: DataBase) -> interactions.Embed:
        userId = str(ctx.user.id)
        embed = interactions.Embed(
            title="Áé©ÂÆ∂Ê™îÊ°à",
            color=0xFFA500
        )

        embed.set_author(f"{ctx.user.username}-skillpoint",
                         icon_url=ctx.user.avatar_url)
        embed.set_thumbnail(ctx.user.avatar_url)
        embed.add_field(name="Êï∏ÂÄº", value=f"‚ù§Ô∏è **Ë°ÄÈáè**: {db[userId]['È≠îÂäõÈáè']['Ë°ÄÈáè']} (+{Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç']['Ë°ÄÈáè']}\n"
                        f"üî™ **ÊîªÊìä**: {db[userId]['È≠îÂäõÈáè']['ÊîªÊìä']} (+{Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç']['ÊîªÊìä']}\n"
                        f"üõ°Ô∏è **Èò≤Á¶¶**: {db[userId]['È≠îÂäõÈáè']['Èò≤Á¶¶']} (+{Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç']['Èò≤Á¶¶']}\n"
                        f"üèÉ **È´îÂäõ**: {db[userId]['È≠îÂäõÈáè']['È´îÂäõ']} (+{Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç']['È´îÂäõ']}\n"
                        f"üõπ **ÊïèÊç∑**: {db[userId]['È≠îÂäõÈáè']['ÊïèÊç∑']} (+{Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç']['ÊïèÊç∑']}\n"
                        f"üîß **ÊäÄÂ∑ß**: {db[userId]['È≠îÂäõÈáè']['ÊäÄÂ∑ß']} (+{Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç']['ÊäÄÂ∑ß']}\n"
                        f"üß† **Êô∫Âäõ**: {db[userId]['È≠îÂäõÈáè']['Êô∫Âäõ']} (+{Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç']['Êô∫Âäõ']}\n")
        embed.add_field(name="ÂèØÂàÜÈÖçÈ≠îÂäõÈáè", value=f"{Storage(userId)['È≠îÂäõÈªûÂâ©È§ò']}")
        return embed

    @staticmethod
    def createSkillMenuComponent() -> interactions.SelectMenu:
        return interactions.SelectMenu(
            options=[
                interactions.SelectOption(
                    label="Ë°ÄÈáè",
                    value="Ë°ÄÈáè",
                    description="ÂèØ‰ª•ÊèêÂçáË°ÄÈáè"
                ),
                interactions.SelectOption(
                    label="ÊîªÊìä",
                    value="ÊîªÊìä",
                    description="ÂèØ‰ª•ÊèêÂçáÊîªÊìä"
                ),
                interactions.SelectOption(
                    label="Èò≤Á¶¶",
                    value="Èò≤Á¶¶",
                    description="ÂèØ‰ª•ÊèêÂçáÈò≤Á¶¶"
                ),
                interactions.SelectOption(
                    label="È´îÂäõ",
                    value="È´îÂäõ",
                    description="ÂèØ‰ª•ÊèêÂçáÈ´îÂäõ"
                ),
                interactions.SelectOption(
                    label="ÊïèÊç∑",
                    value="ÊïèÊç∑",
                    description="ÂèØ‰ª•ÊèêÂçáÊïèÊç∑"
                ),
                interactions.SelectOption(
                    label="ÊäÄÂ∑ß",
                    value="ÊäÄÂ∑ß",
                    description="ÂèØ‰ª•ÊèêÂçáÊäÄÂ∑ß"
                ),
                interactions.SelectOption(
                    label="Êô∫Âäõ",
                    value="Êô∫Âäõ",
                    description="ÂèØ‰ª•ÊèêÂçáÊô∫ÂäõÔºå‰∏çËÆì‰Ω†ËÆäÊàêÊô∫Èöú"
                )
            ],
            placeholder="Select a ability to check",
            custom_id="skillmenu"
        )

    @staticmethod
    def createSkillDesEmbed(ctx: interactions.CommandContext, db: DataBase, value) -> interactions.Embed:
        userId = str(ctx.user.id)
        embed = interactions.Embed(title=value, color=0x00FF00)
        embed.set_author(f"{ctx.user.username}-skillpoint",
                         icon_url=ctx.user.avatar_url)
        if value == "Ë°ÄÈáè":
            embed.add_field(name="ÊèèËø∞", value="ÂèØ‰ª•ÊèêÂçáË°ÄÈáè")
        elif value == "ÊîªÊìä":
            embed.add_field(name="ÊèèËø∞", value="ÂèØ‰ª•ÊèêÂçáÊîªÊìä")
        elif value == "Èò≤Á¶¶":
            embed.add_field(name="ÊèèËø∞", value="ÂèØ‰ª•ÊèêÂçáÈò≤Á¶¶")
        elif value == "È´îÂäõ":
            embed.add_field(name="ÊèèËø∞", value="ÂèØ‰ª•ÊèêÂçáÈ´îÂäõ")
        elif value == "ÊïèÊç∑":
            embed.add_field(name="ÊèèËø∞", value="ÂèØ‰ª•ÊèêÂçáÊïèÊç∑")
        elif value == "ÊäÄÂ∑ß":
            embed.add_field(name="ÊèèËø∞", value="ÂèØ‰ª•ÊèêÂçáÊäÄÂ∑ß")
        elif value == "Êô∫Âäõ":
            embed.add_field(name="ÊèèËø∞", value="ÂèØ‰ª•ÊèêÂçáÊô∫ÂäõÔºå‰∏çËÆì‰Ω†ËÆäÊàêÊô∫Èöú")
        embed.add_field(
            name="ÂèØÂàÜÈÖçÈ≠îÂäõÈáè", value=f"  {Storage(userId)['È≠îÂäõÈªûÂâ©È§ò']}", inline=True)
        embed.add_field(
            name=f"{value}", value=f"  +{db[userId]['È≠îÂäõÈáè'][value]+Storage(userId)['È≠îÂäõÈªûÂàÜÈÖç'][value]}", inline=True)
        return embed

    @staticmethod
    def createInventoryEmbed(ctx: interactions.CommandContext, db: DataBase) -> Tuple:
        userId = str(ctx.user.id)
        embed = interactions.Embed(title="Áé©ÂÆ∂ËÉåÂåÖ", color=0xFF0000)
        embed.set_author(f"{ctx.user.username}-inventory",
                         icon_url=ctx.user.avatar_url)
        options = []
        items = ""
        count = ""
        armor = []
        food = []
        item = []
        for item in db[userId]["ËÉåÂåÖ"]:
            if item["Á®ÆÈ°û"] == "Ë£ùÁî≤Ê≠¶Âô®":
                armor.append(item)
            elif item["Á®ÆÈ°û"] == "È£üÁâ©":
                food.append(item)
            else:
                item.append(item)
        sorted(armor, key=cmp_to_key(sortByEquipAndName))
        food.sort()
        item.sort()
        for item in db[userId]["ËÉåÂåÖ"]:
            items += f"{item['ÂêçÁ®±']}\n"
            count += f"{item['Êï∏Èáè']}\n"
            options.append(interactions.SelectOption(
                label=item['ÂêçÁ®±'],
                value=item['ÂêçÁ®±'],
                description=item['Êï∏Èáè']
            ))
        embed.add_field(name="Áâ©ÂìÅÂêçÁ®±", value=items, inline=True)
        embed.add_field(name="Êï∏Èáè", value=count, inline=True)
        return (embed, options, )

    @staticmethod
    def createPickInventoryEmbed(ctx: interactions.CommandContext, db: DataBase, name: str) -> interactions.Embed:
        userId = str(ctx.user.id)
        embed = interactions.Embed(
            title=name, color=0x13DD66)
        embed.set_author(f"{ctx.user.username}-ÂêçÁ®±",
                         icon_url=ctx.user.avatar_url)
        embed.add_field(name="Áâ©ÂìÅÂêçÁ®±", value=name)
        items = [item["ÂêçÁ®±"] for item in db[userId]["ËÉåÂåÖ"]]
        embed.add_field(
            name="Áâ©ÂìÅÊï∏Èáè", value=db[userId]["ËÉåÂåÖ"][items.index(name)]["Êï∏Èáè"])
        return embed

    @staticmethod
    def createStoryComponents(ctx: interactions.CommandContext) -> List[interactions.SelectOption]:
        userId = str(ctx.user.id)
        if not Storage(userId).contains((), "storyVars"):
            Storage(userId)["storyVars"] = {}
        components: List[interactions.SelectOption] = list()
        for option in Storage(userId)["story"].contents[Storage(userId)["storyId"]]["options"]:
            show = True

            for cond in option["ifConditions"]:
                if not Storage(userId).contains(("storyVars",), cond):
                    Storage(userId)["storyVars", cond] = False
                if not Storage(userId)["storyVars"][cond]:
                    show = False
                    break

            for cond in option["notIfConditions"]:
                if not Storage(userId).contains(("storyVars",), cond):
                    Storage(userId)["storyVars", cond] = False
                if Storage(userId)["storyVars"][cond]:
                    show = False
                    break

            if show:
                components.append(
                    interactions.SelectOption(
                        label=option["option"],
                        value=option["linkPath"]
                    ))
        for flag in Storage(userId)["story"].contents[Storage(userId)["storyId"]]["flags"]:
            Storage(userId)["storyVars", flag] = True
        return components
